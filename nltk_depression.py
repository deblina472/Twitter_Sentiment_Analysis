# -*- coding: utf-8 -*-
"""NLTK_DEPRESSION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cpSrj0lOKKBJONIddVJsFEMQULbjn2QL
"""

import random
import string # to process standard python strings
import warnings
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import warnings
import pandas as pd
warnings.filterwarnings('ignore')

import nltk
from nltk.stem import WordNetLemmatizer
nltk.download('popular', quiet=True) # for downloading packages

# uncomment the following only the first time
#nltk.download('punkt') # first-time use only
#nltk.download('wordnet') # first-time use only

#Reading in the corpus
xls = pd.read_excel(r"QNA.xlsx") #use r before absolute file path

xls = xls.applymap(str)

#TOkenisation

QuestionTokenS = []

# Iterate over each row
for index, rows in xls.iterrows():
    # Create list for the current row
    my_list = [rows.questions]
    # append the list to the final list
    QuestionTokenS.append(my_list)

Question_tokens = [item for l in QuestionTokenS for item in l]

AnswerTokenS = []

# Iterate over each row
for index, rows in xls.iterrows():
    # Create list for the current row
    my_list = [rows.answers]
    # append the list to the final list
    AnswerTokenS.append(my_list)

Answer_tokens = [item for l in AnswerTokenS for item in l]

# Preprocessing
lemmer = WordNetLemmatizer()
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]

remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)
def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

# Keyword Matching
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey",)
GREETING_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]

def greeting(sentence):
    """If user's input is a greeting, return a greeting response"""
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)
# Generating response
def response(user_response):
    robo_response=''
    Question_tokens.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize,stop_words='english')
    tfidf = TfidfVec.fit_transform(Question_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        robo_response=robo_response+"I am sorry! I don't understand you"
        return robo_response
    else:
        robo_response = robo_response+Answer_tokens[idx]
        return robo_response



